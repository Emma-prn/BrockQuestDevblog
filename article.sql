-- phpMyAdmin SQL Dump
-- version 4.9.10
-- https://www.phpmyadmin.net/
--
-- Hôte : db5000246048.hosting-data.io
-- Généré le : mar. 30 mai 2023 à 14:25
-- Version du serveur : 5.7.41-log
-- Version de PHP : 7.0.33-0+deb9u12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données : `dbs240375`
--

-- --------------------------------------------------------

--
-- Structure de la table `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `titre` varchar(255) NOT NULL,
  `photo_ap` text NOT NULL,
  `partie1` text,
  `photo1` text,
  `partie2` text,
  `photo2` text,
  `partie3` text,
  `photo3` text,
  `partie4` text,
  `photo4` text,
  `partie5` text,
  `photo5` text
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `article`
--

INSERT INTO `article` (`id`, `titre`, `photo_ap`, `partie1`, `photo1`, `partie2`, `photo2`, `partie3`, `photo3`, `partie4`, `photo4`, `partie5`, `photo5`) VALUES
(1, 'Le redesign de Brock', 'img/redesign.png', 'Première tâche de Brock’s Quest Remastered : remettre Brock au goût du jour. Ayant été créé en 2018, il avait un peu vieilli et lui donner un coup de jeune semblait une bonne idée. Afin de refaire son modèle, je me suis servi du template 24x32 bases de Cabbit sur OpenGameArt. La nouvelle version de Brock reprend ses couleurs d’origine et certains détails ont même été ajoutés. Maintenant Brock possède des chaussures, une magnifique veste et des yeux violets (cela change des points noirs qu’il avait avant.).', 'img/templateB.png', 'L’un des points positifs de ce template est qu’il permet de faire différentes poses, ce qui est très utile pour réaliser les animations de marche. D’ailleurs, ces animations sont un ajout de cette version, elles n’étaient pas en place sur le jeu d’origine.', 'img/walk.png', 'Le redesign a été réalisé avec Photoshop. Chaque pose correspond à un groupe de calques, ces derniers correspondant à un élément différent : cheveux, yeux, veste, pantalon ainsi que chaussures. Cela permettait de dupliquer facilement des éléments qui ne changeaient pas pour certaines poses comme les cheveux par exemple.', 'img/calques.png', '', '', NULL, NULL),
(2, 'La création des différentes maps', 'img/map1.png', 'Maintenant, que Brock a fait peau neuve, il est temps de s’attaquer à la création des différentes maps du jeu. Pour ces dernières, j’ai repris les maps existantes dans le jeu d’origine : la maison, le village, la forêt, la cave… Tout d\'abord, j’ai fait des croquis sur papier pour bien visualiser la zone, qu\'elle forme elles allaient avoir, quelle taille, les bâtiments que je souhaitais mettre. Une fois les croquis terminés, j’ai pu m’attaquer à la création de chaque map sur Unity. Ici, une scène correspond à une map.', NULL, 'Pour créer les maps, j’ai utilisé plusieurs TileSets que j’ai trouvé sur OpenGameArt, j’ai principalement utilisé Mage City d’Hyptosis, [LPC] Floors (bluecarrot16, Lanea Zimmerman (Sharm), William Thompson (William.Thompsonj), Hyptosis, SpiderDave, Cougarmint, Stephen Challener (Redshrike), Bonsaiheldin, Tyler Olsen (Roots), Jetrel, jestan, The Open Surge team (http://opensnc.sourceforge.net), Gaurav Munjal, Reemax, Silveira Neto, bleutailfly, Casper Nilsson, NaRNeRZz, Buch, keith karnage, Arthur Carvalho, Guilherme Vieira (n2liquid), Chris Hamons (maintainer)) et [LPC] Walls (bluecarrot16, Lanea Zimmerman (Sharm), Daniel Armstrong (HughSpectrum), William Thompson (William.Thompsonj), Hyptosis, Zabin, Daniel Cook, Guido Bos, SpiderDave, Cougarmint, Stephen Challener (Redshrike), Matthew Nash, Wolthera van Hövell tot Westerflier (TheraHedwig), Reemax, bleutailfly, NaRNeRZz, Sir Spummington, Casper Nilsson, KnoblePersona). Une fois les TileSets trouvés, les images sont découpées pour séparer les différentes Tiles. Une palette peut alors être créée et les Tiles peuvent être importés dans cette dernière. La palette créée, on peut alors dessiner la map avec en sélectionnant la Tile qui nous intéresse et en créer une Tilemap dans la scène.', 'img/palette.png', 'La map est composée de plusieurs Tilemaps, chacune étant composée de différents éléments et remplissant différents rôles. La Tilemap Ground représente la zone où Brock peut se déplacer sans aucun problème. La Tilemap Obs, quant à elle, est composée de maisons, tonneaux, arbres, caisses… Tous les obstacles avec lesquels Brock va entrer en collision. Cette Tilemap possède un TilemapCollider qui rend les collisions possibles avec les Tiles de cette dernière. Ensuite, vient la Tilemap Deco et quelques fois Deco2, ce sont les différents objets de décorations comme les fenêtres, les feuilles, les branches d’arbres ou les fissures. Elles permettent de donner plus de vie à la map. La Tilemap Rempart est surtout présente pour les villes et reprend le même principe que la Tilemap Obs.', 'img/maps.png', 'Les Tilemaps sont placées à différentes distances de la caméra et de Brock afin d’éviter qu’elles se confondent entre elles et que Brock ait des bugs d’affichages. (Si Brock et une des Tilemaps sont à la même distance de la caméra, il peut passer au travers des éléments lors de certains déplacements.)', NULL, NULL, NULL),
(3, 'Les déplacements et les animations de Brock', 'img/anim2.png', 'Avec Brock et les maps crées, on peut maintenant lui permettre de se déplacer et c\'est là que les différentes sprites de ce dernier vont servir.', NULL, 'Brock se déplace grâce aux flèches directionnelles. Pour créer ses déplacements, il faut savoir dans quelle direction il se dirige. On crée alors un script qui va observer les axes directionnels suivant la flèche sur laquelle on appuie et modifier sa position en conséquence. Une vitesse de déplacement est aussi ajoutée en paramètre afin que les déplacements soient plus lisses.', 'img/spritesAlign.png', 'Une animation de marche a aussi été créée avec les différents sprites de Brock. Chaque direction possède sa propre animation et cette dernière change en fonction de la direction dans laquelle Brock se dirige. Une fonction permet de changer le paramètre gérant l’animation en fonction de la direction de Brock.', 'img/anim1.png', NULL, NULL, NULL, NULL),
(4, 'Le changement de scène (Première version)', 'img/loadL2.png', 'Maintenant, que Brock peut enfin se déplacer dans une des maps, il est temps qu’il aille explorer les suivantes, il ne va pas rester tout le jeu chez lui, où est l’aventure sinon.', NULL, 'Afin qu’il puisse passer de scène en scène, des Exits Points furent créés pour chaque map. Ces points sont représentés par un Empty possédant un BoxCollider2D dont l’option IsTrigger est activée. Cette option permet de déclencher une fonction quand un autre GameObject entre dans la zone de l’Empty. Ici, on veut que le changement de scène se passe quand Brock entre dans l’Exit Point.', 'img/exitPt.png', 'Les points créés, il faut les rendre fonctionnelles. Un script fut alors créé pour permettre le chargement d’une autre scène lorsque Brock entre dans l’Exit Point. Ce script fonctionne avec la classe SceneManagement d’Unity. Elle permet de charger une scène, avec la fonction LoadScene, si cette dernière se trouve dans les paramètres du Build. Sans ça, impossible de charger une nouvelle scène.', NULL, 'Le nom de la scène à charger est alors passé en paramètre du script. La fonction OnTriggerEnter2D est alors utilisée et vérifie le tag de l’objet qui a trigger l’Exit Point. Si celui-ci correspond au tag “player”, la fonction LoadScene est appelée avec en paramètre le nom de la scène donnée précédemment. La nouvelle scène est alors chargée et Brock apparaît à la position de l’ancien Exit Point.', NULL, 'Bien sûr, des améliorations sont encore possibles pour le changement de scène, on pourrait faire le changement avec une transition pour éviter d’avoir un changement brusque ou encore ajouter des Starts Points pour initialiser une position de départ pour Brock dans chaque scène.', NULL),
(5, 'Les écrans d’accueil et des crédits', 'img/accueil.png', 'Il est temps de passer à la création des écrans d\'accueil et des crédits du jeu. L\'accueil permettra de lancer le jeu, d\'avoir accès aux crédits et de quitter le jeu. Les crédits permettront de voir les différentes ressources utilisées dans la création du jeu.', NULL, 'Une scène est créée pour chaque écran et un Canvas y est ajouté. Ce dernier va permettre l’ajout de textes et de boutons permettant de réaliser différentes actions. L\'écran d\'accueil est composé de trois boutons : Jouer pour accéder à la première scène du jeu, Crédits pour accéder aux crédits et Quitter pour quitter le jeu. L’écran des crédits est quant à lui composé que d’un seul bouton : Retour pour revenir à l’écran d’accueil.', 'img/credits.png', 'Un script est alors créé pour permettre les changements de scène. Chaque bouton dispose de sa fonction qui est appelée avec le paramètre OnClick du bouton en question. Il suffit de l’ajouter à le + et de chercher le script et la fonction que l’on souhaite utiliser.', NULL, NULL, NULL, NULL, NULL),
(6, 'La caméra', 'img/Cam1.png', 'Brock peut se déplacer et changer de map, mais pour le moment la caméra de la scène est toujours fixe. Il est temps de remédier à ça. La caméra va devoir suivre Brock et se stopper aux bords de la map.', NULL, 'Pour faire en sorte que la caméra suit Brock lorsqu\'il se déplace, il faut créer un script. Ce dernier prend une cible à suivre ainsi qu’une vitesse en paramètre. La position de la caméra est alors calculée en fonction de la vitesse donnée et de la position de Brock.', NULL, 'Maintenant, que la caméra suit Brock, il faut que celle-ci s’arrête aux bords de la map. Un Empty, de la taille de la map, avec un BoxCollider2D avec l’option IsTrigger activé est créé. Ce dernier va alors servir à trouver les limites de la map pour ensuite les prendre en compte lors du calcul de la position de la caméra. De cette manière, la caméra arrête de suivre Brock dès qu’elle entre en contact avec les bords de l’Empty.', 'img/Cam2.png', NULL, NULL, NULL, NULL),
(7, 'Les musiques', 'img/Music.png', 'Afin de rendre le jeu un peu plus vivant, j’ai commencé à chercher des musiques sur OpenGameArt. Après quelques recherches, je suis tombée sur les collections JRPG Collection1 et JRPG Collection2 de Yubatake. En écoutant les différentes musiques, je trouvais qu’elles correspondaient bien à l’univers du jeu, elles rappellent beaucoup les vieux RPG / JRPG.', NULL, 'Une source Audio fut alors ajoutée à chaque scène du jeu avec les options play on Awake et Loop activée, et les différentes musiques furent ajoutées dans les sources.', NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(8, 'Le changement de scène avec transition', 'img/transition.png', 'Revenons un peu sur les changements de scène, actuellement ces derniers se font uniquement avec les Exits Points. Ils sont un peu brusques et Brock n’apparaît pas à la position souhaitée. Pour adoucir le changement, quoi de mieux que de faire une animation de transition. Ici, cette transition sera un écran noir qui apparaît et disparaît.', NULL, 'Pour la réaliser, un Canvas doit être ajouté à la scène et ce dernier doit contenir une image complètement noire. On peut alors ajouter à ce Canva le composant Canva Group permettant de modifier différents paramètres des éléments présents dans le Canva, dont l’opacité. Une fois, cela mit en place, la transition peut être créée. Cette dernière est séparée en deux animations, une où l’opacité va de 1 à 0 (fadeOut) et l’autre où elle va de 0 à 1(fadeIn). La musique a aussi le droit à une transition similaire avec son volume de cette manière, elle commence et s’arrête progressivement lors du changement de scène.', NULL, 'Un script est alors créé permettant de charger la scène avec une coroutine. Cette dernière permet de d’activer la transition et d’attendre un temps avant de charger la nouvelle scène. Une fonction appelant cette coroutine est alors créée et utilisée dans les scripts Menu et LoadLevel afin de charger les scènes avec les différentes transitions. Ces scripts prennent alors en paramètre le Canva contenant la transition. Pour rendre son intégration dans les autres scènes plus simple, ce dernier est changé en prefab.', NULL, 'Afin de régler le problème de ma position de Brock, des Starts Points ont été ajoutés. Ce sont des Empties placés sur les scènes et qui possèdent un script donnant à Brock ainsi qu’à la caméra leur position. De cette manière, Brock et la caméra apparaissent à la position souhaitée lors du changement de scène.', 'img/startPt.png', 'Quelques améliorations peuvent être possibles comme faire apparaître Brock dans une direction donnée à la place de l’idle et gérer les cas où plusieurs Starts Points sont présents sur une même scène.', NULL),
(9, 'Les ennemis (Première version)', 'img/boss.png', 'Si on récapitule, actuellement Brock peut se déplacer dans toutes les maps du jeu et les explorer, mais elles restent un peu vide et si on ajoutait des ennemis ?', NULL, 'Pour les différents ennemis, je vais utiliser les sprites 24x32-characters-big-pack de Cabbit trouvés sur OpenGameArt. C’est la même personne ayant fait le template utilisé pour le redesign de Brock. Les ennemis possèdent des points de vie, d’attaque ainsi que de défense. Quand ils vont être sur la map, ils vont avoir un BoxCollider2D avec l’option IsTrigger activée. Le BoxCollider sera un peu plus grand qu’eux pour créer une zone activant le chargement de la scène Battle. Dès que Brock entre dans la zone, le combat commence.\r\n', 'img/monster.png', 'Cela reste assez simple, mais les ennemis seront améliorés au fur et à mesure. Pour le moment, seul le boss est sur sa map, le reste des ennemis arrivera un peu plus tard.', NULL, NULL, NULL, NULL, NULL),
(10, 'La scène de combat', 'img/battle.png', 'Pour le moment, les combats ne sont pas encore intégrés au jeu, mais la scène et une première version de la logique derrière ces derniers sont déjà en place. Les combats vont se faire au tour par tour avec cette structure : le combat commence, tour de Brock, tour du monstre, il s’arrête dès que l’un d’entre eux à perdu.', NULL, 'L’interface est déjà en place, elle a été réalisée avec un Canva composé de trois panneaux. L’un des panneaux affiche les informations sur le combat ainsi que les actions que Brock peut réaliser (Attaquer, se soigner et fuir). Les deux panneaux restants affichent les points de vie actuels de Brock et du monstre qu’il affronte.', 'img/battleTxt.png', 'Une classe Unit est créée afin de stocker les points de vie, d’attaque et de défense. Elle permet aussi de définir les fonctions pour la prise de dégât ainsi que celle de soin. La prise de dégât se fait en fonction des points de défense que l\'unité possède. S’ils sont supérieurs à ceux de l’attaque, elle ne subira aucun dégât, s’ils sont inférieurs, elle prendra la différence entre les deux. Les panneaux de l’interface sont mis à jour à chaque tour (Affichage d’information, points de vie perdus/gagnés).', NULL, 'L’intégration des combats est en cours et pour le moment l’un des problèmes restants est de charger la scène en conservant en mémoire la position de Brock pour qu’il réapparaisse au même endroit une fois le combat terminé.', NULL, NULL, NULL),
(11, 'Idées d’éléments à ajouter plus tard ou à améliorer', 'img/work-in-progress.png', 'Pour le moment, le jeu a une bonne base, en essayant d’intégrer au plus vite la scène de combat au reste des scènes. Mais on peut toujours améliorer certains éléments et en ajouter d’autres. En parlant de la scène de combat, l’un des éléments à ajouter serait un background personnalisé. Suivant la scène ou le combat commence le fond change pour avoir une image adaptée.', NULL, 'Des PNJ et des ennemis vont être ajoutés dans les différentes maps, cela les peuplera un peu et Brock se sentira un peu moins seul. Les PNJ et les monstres auront aussi des déplacements, cela leur donnera un air vivant et certains des PNJ auront peut-être des dialogues. Un garde sera ajouté au niveau de l\'entrée des plaines, il bloquera l’entrée pour Brock et ce dernier devra aller parler à un autre PNJ (le maire de la ville par exemple) pour avoir le droit d’accéder à la zone. Une fois qu’il lui a parlé et qu’il revient voir le garder, celui-ci s’écarte et le laisse passer.\r\n', NULL, 'Les écrans de Game Over et de Victoire doivent être faits. Dans l’écran de Game Over, un bouton permettra de revenir au menu pour retenter sa chance. Pour celui de victoire, un message de félicitations sera affiché et le joueur pourra rejouer.', NULL, 'Les combats, c’est très bien, mais à la longue, cela peut un peu ennuyer donc une bonne idée serait d’ajouter des quêtes avec certains des PNJ. Par exemple ramasser un objet et l’apporter à quelqu’un, parler à un autre PNG… Cela serait aussi une bonne occasion de faire un peu plus de maps surtout pour l’intérieur des bâtiments. Pour le moment, seule la maison de Brock est accessible, mais j’aimerais bien qu’il y en est plus.\r\n', NULL, 'Le jeu n’est pas encore fini, ces éléments sont à apporter et qui sait peut-être que d’autres feront leurs apparitions dans la liste au fil du temps.\r\n<br><br>\r\n<a href=\"https://www.flaticon.com/free-icons/work-in-progress\" title=\"work in progress icons\">Work in progress icons created by Freepik - Flaticon</a>', NULL);

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
